package com.asfug{	import flash.system.Capabilities;	import com.asfug.FileCreate;	import flash.display.*;	import flash.text.*;	import flash.events.*;	import flash.net.*;	import adobe.utils.*;	/**	 * ...	 * @author Danny Murong, Ed Moore, Shang Liang	 */	public class StructureCreator extends MovieClip	{		private static const CURRENT_VERSION:String = "1.3";		private static const VERSION_CHECK:String = "http://flashstructurecreator.googlecode.com/svn/trunk/latestversion.txt";		private static const DEFAULT_SCHEMA_URL:String = "http://flashstructurecreator.googlecode.com/svn/trunk/Structure_Schema_1_2.xml";		private static const DEFAULT_WIDTH:int = 970;		private static const DEFAULT_HEIGHT:int = 570;		private static const DEFAULT_FPS:int = 30;		private static const DEFAULT_CLASS_URL:String = "Class.as"; // IN CONFIG URI		private static const DEFAULT_FD_PROJ_URL:String = "Project.as3proj"; // IN CONFIG URI		private static const FLASH_BUILDER_FILES:Array = [".project", ".actionScriptProperties", "org.eclipse.core.resources.prefs"]; // IN CONFIG URI		private static const DEFAULT_PROJECT_NAME:String = "New Project";				private var _mainFolderURL:String;		private var _schemaURL:String;		private var _schemaXML:XML;		private var _xmlLoader:URLLoader;		private var _classLoader:URLLoader;		private var _packageInput:String;		private var _packageArr:Array;		private var _packageClassName:String;		internal static var packageClassPath:String;		internal static var swfFileName:String;				private var savedSettings:SharedObject;		private var _totalFiles:int;		private var _createdFiles:int;				public function StructureCreator()		{			assignListeners();			//populatePackageInput();						savedSettings = SharedObject.getLocal("structure_creator");			if(savedSettings.data.lastSchemaValue)				schema_txt.text = savedSettings.data.lastSchemaValue;							project_txt.restrict = "a-zA-Z0-9. ";			project_txt.text = DEFAULT_PROJECT_NAME;			widthInput_txt.maxChars = 5;			widthInput_txt.restrict = "0-9";			if (savedSettings.data.newwidth)				widthInput_txt.text = savedSettings.data.newwidth;			else				widthInput_txt.text = String(DEFAULT_WIDTH);							heightInput_txt.maxChars = 5;			heightInput_txt.restrict = "0-9";			if (savedSettings.data.newheight)				heightInput_txt.text = savedSettings.data.newheight;			else				heightInput_txt.text = String(DEFAULT_HEIGHT);						framerateInput_txt.maxChars = 3;			framerateInput_txt.restrict = "0-9";			if (savedSettings.data.newfps)				framerateInput_txt.text = savedSettings.data.newfps;			else				framerateInput_txt.text = String(DEFAULT_FPS);						packageInput_txt.restrict = "a-zA-Z0-9.";			packageInput_txt.text = "Optional";						default_cb.label = "Use Default";			schema_btn.label = "Select Schema";			flashdevelop_cb.label = "Flash Develop";			flashbuilder_cb.label = "Flash Builder";			if (Boolean(savedSettings.data.defaultCb))				default_cb.dispatchEvent(new MouseEvent(MouseEvent.CLICK));			else if (Boolean(savedSettings.data.defaultCb) == false)				trace("default not selected");			else				default_cb.dispatchEvent(new MouseEvent(MouseEvent.CLICK));							if (Boolean(savedSettings.data.flashdevelopCb))				flashdevelop_cb.dispatchEvent(new MouseEvent(MouseEvent.CLICK));			else if (Boolean(savedSettings.data.flashdevelopCb) == false)				trace("default not selected");			else				flashdevelop_cb.dispatchEvent(new MouseEvent(MouseEvent.CLICK));							if (Boolean(savedSettings.data.flashbuilderCb))				flashbuilder_cb.dispatchEvent(new MouseEvent(MouseEvent.CLICK));			else if (Boolean(savedSettings.data.flashbuilderCb) == false)				trace("default not selected");			else				flashbuilder_cb.dispatchEvent(new MouseEvent(MouseEvent.CLICK));							/*if (Boolean(savedSettings.data.player9Rb))				ver9_rb.dispatchEvent(new MouseEvent(MouseEvent.CLICK));			else if (Boolean(savedSettings.data.player9Rb) == false)				trace("default not selected");			else				ver9_rb.dispatchEvent(new MouseEvent(MouseEvent.CLICK));							if (Boolean(savedSettings.data.player10Rb))				ver10_rb.dispatchEvent(new MouseEvent(MouseEvent.CLICK));			else if (Boolean(savedSettings.data.player10Rb) == false)				trace("default not selected");			else				ver10_rb.dispatchEvent(new MouseEvent(MouseEvent.CLICK));*/							checkForUpdate();		}				function assignListeners():void		{			folder_btn.addEventListener(MouseEvent.CLICK, clickHandler);			schema_btn.addEventListener(MouseEvent.CLICK, clickHandler);			create_btn.addEventListener(MouseEvent.CLICK, clickHandler);			default_cb.addEventListener(MouseEvent.CLICK, clickHandler);			flashdevelop_cb.addEventListener(MouseEvent.CLICK, clickHandler);			flashbuilder_cb.addEventListener(MouseEvent.CLICK, clickHandler);			//ver9_rb.addEventListener(MouseEvent.CLICK, clickHandler);			//ver10_rb.addEventListener(MouseEvent.CLICK, clickHandler);			widthInput_txt.addEventListener(FocusEvent.FOCUS_IN, focusInHandler);			widthInput_txt.addEventListener(FocusEvent.FOCUS_OUT, focusOutHandler);			heightInput_txt.addEventListener(FocusEvent.FOCUS_IN, focusInHandler);			heightInput_txt.addEventListener(FocusEvent.FOCUS_OUT, focusOutHandler);			framerateInput_txt.addEventListener(FocusEvent.FOCUS_IN, focusInHandler);			framerateInput_txt.addEventListener(FocusEvent.FOCUS_OUT, focusOutHandler);			packageInput_txt.addEventListener(FocusEvent.FOCUS_IN, focusInHandler);			packageInput_txt.addEventListener(FocusEvent.FOCUS_OUT, focusOutHandler);			project_txt.addEventListener(FocusEvent.FOCUS_IN, focusInHandler);			project_txt.addEventListener(FocusEvent.FOCUS_OUT, focusOutHandler);		}		function populatePackageInput():void		{			_packageInput = new String(packageInput_txt.text);			_packageArr = _packageInput.split(".");			_packageClassName = String(_packageArr.pop());			packageClassPath = String(_packageArr.join("."));		}		function clickHandler(evt:MouseEvent):void		{			var targetName:String = evt.currentTarget.name;						switch (targetName)			{				case "folder_btn":					var op:String = executeJSFL('"getMainFolderURI"');					if (op != "null")					{						_mainFolderURL = op;						folder_txt.text = _mainFolderURL;					}				break;								case "schema_btn":					var sch:String = executeJSFL('"getSchemaURL"');					if (sch != "null")					{						_schemaURL = sch;						schema_txt.text = _schemaURL;					}				break;								case "flashdevelop_cb":									break;								case "flashbuilder_cb":									break;								case "default_cb":					if (evt.currentTarget.selected)					{						schema_btn.enabled = false;						_schemaURL = StructureCreator.DEFAULT_SCHEMA_URL;						schema_txt.text = _schemaURL;					}					else					{						schema_btn.enabled = true;						//edit_btn.gotoAndStop(1);						trace("open");						schema_txt.text = "";					}				break;				case "create_btn":					populatePackageInput();					percent_txt.text = '';										if (validate())						startCreation();				break;			}		}		function focusInHandler(evt:FocusEvent):void		{			var targetName:String = evt.currentTarget.name;						switch (targetName)			{				case "widthInput_txt":					if (widthInput_txt.text == String(StructureCreator.DEFAULT_WIDTH))						widthInput_txt.text = "";				break;								case "heightInput_txt":					if (heightInput_txt.text == String(StructureCreator.DEFAULT_HEIGHT))						heightInput_txt.text = "";				break;								case "framerateInput_txt":					if (framerateInput_txt.text == String(StructureCreator.DEFAULT_FPS))						framerateInput_txt.text = "";				break;								case "project_txt":					if (project_txt.text == String(StructureCreator.DEFAULT_PROJECT_NAME))						project_txt.text = "";				break;								case "packageInput_txt":					if (packageInput_txt.text == "Optional")						packageInput_txt.text = "";				break;			}		}				function focusOutHandler(evt:FocusEvent):void		{			var targetName:String = evt.currentTarget.name;						switch (targetName)			{				case "widthInput_txt":					if (widthInput_txt.text == "")						widthInput_txt.text = String(StructureCreator.DEFAULT_WIDTH);				break;								case "heightInput_txt":					if (heightInput_txt.text == "")						heightInput_txt.text = String(StructureCreator.DEFAULT_HEIGHT);				break;								case "framerateInput_txt":					if (framerateInput_txt.text == "")						framerateInput_txt.text = String(StructureCreator.DEFAULT_FPS);				break;								case "project_txt":					if (project_txt.text == "")						project_txt.text = StructureCreator.DEFAULT_PROJECT_NAME;				break;								case "packageInput_txt":					if (packageInput_txt.text == "")						packageInput_txt.text = "Optional";				break;			}		}		function executeJSFL(commands:String):String		{			return MMExecute('fl.runScript(fl.configURI + "StructureCreator/Structure Creator.jsfl", ' + commands + ')');		}		function validate():Boolean		{			var bool:Boolean = true;			if (project_txt.length != 0 && folder_txt.length != 0 && schema_txt.length != 0 && widthInput_txt.length != 0 && heightInput_txt.length != 0 && framerateInput_txt.length != 0)			{				info_txt.htmlText = "";			}			else			{				info_txt.htmlText = "<font color='#FF0000'>* Fill in all fields.</font>";				bool = false;			}						return bool;		}		function startCreation():void		{			savedSettings.clear();			savedSettings.data.lastSchemaValue = schema_txt.text;			savedSettings.data.newwidth = widthInput_txt.text;			savedSettings.data.newheight = heightInput_txt.text;			savedSettings.data.newfps = framerateInput_txt.text;			savedSettings.data.defaultCb = default_cb.selected;			savedSettings.data.flashdevelopCb = flashdevelop_cb.selected;			savedSettings.data.flashbuilderCb = flashbuilder_cb.selected;			var flushResult:Object = savedSettings.flush();						info_txt.htmlText += "Loading schema... Please wait...\n";			_xmlLoader = new URLLoader(new URLRequest(_schemaURL));			_xmlLoader.addEventListener(IOErrorEvent.IO_ERROR, schemaXMLLoadError);			_xmlLoader.addEventListener(Event.COMPLETE, schemaXMLLoadComplete);		}				private function schemaXMLLoadError(e:IOErrorEvent):void		{			info_txt.htmlText += "<font color='#FF0000'>Error loading schema. Check internet connection.</font>\n";		}		private function schemaXMLLoadComplete(evt:Event):void		{			info_txt.htmlText += "Loading schema completed!\n";			_schemaXML = new XML(_xmlLoader.data);			_totalFiles = _schemaXML.descendants('file').length();			_totalFiles += _schemaXML.descendants('folder').length();			_createdFiles = 0;			getFolder(_schemaXML, _mainFolderURL);		}		private function getFolder(xml:XML, folderPath:String):void		{			var folderName:String = String(xml.@name);			var folderURI:String;			if (String(Capabilities.os.toLowerCase()).indexOf("mac") == -1)				folderURI = folderPath + "/";			else 				folderURI = folderPath;			if (folderName != "%BASE%")			{				if (String(Capabilities.os.toLowerCase()).indexOf("mac") > -1)					folderURI = folderPath + "/";				folderURI += folderName;				info_txt.htmlText += executeJSFL('"createFolder", "' + folderURI + '", "' + folderName + '"') + "\n";				updatePercent();			}			else			{				if (flashdevelop_cb.selected)				{					var fd:String = executeJSFL('"getConfigURI"') + "StructureCreator/" + DEFAULT_FD_PROJ_URL;					new FileCreate(this, project_txt.text + '.as3proj', folderURI, fd);				}								if (flashbuilder_cb.selected)				{					var fb:String = executeJSFL('"getConfigURI"') + "StructureCreator/fb/" + FLASH_BUILDER_FILES[0];					new FileCreate(this, FLASH_BUILDER_FILES[0], folderURI, fb);					fb = executeJSFL('"getConfigURI"') + "StructureCreator/fb/" + FLASH_BUILDER_FILES[1];					new FileCreate(this, FLASH_BUILDER_FILES[1], folderURI, fb);					fb = executeJSFL('"getConfigURI"') + "StructureCreator/fb/" + FLASH_BUILDER_FILES[2];					info_txt.htmlText += executeJSFL('"createFolder", "' + folderURI + '/.settings", "' + '.settings' + '"') + "\n";					new FileCreate(this, FLASH_BUILDER_FILES[2], folderURI + '/.settings', fb);				}			}			var folderList:XMLList = xml.children();			for (var i:uint = 0; i < folderList.length(); i++)			{				var folderItemXML:XML = folderList[i];				if (folderItemXML.name() == "folder")				{						getFolder(folderItemXML, folderURI);				}				else if (folderItemXML.name() == "file")				{					var fileNameExtension:String = String(folderItemXML.@name);					var fileName:String = fileNameExtension.split(".")[0];					var fileExtension:String = fileNameExtension.split(".")[1];										if (fileExtension.toLowerCase() == "fla")					{						swfFileName = fileName;						var docClass:String = (_packageInput.toLowerCase() == "optional") ? "" : _packageInput;						var exportPath:String = String(folderItemXML.@exportpath);						var classPath:String;						if (folderItemXML.@classpath == undefined || folderItemXML.@classpath == null)							classPath = "./";						else 							classPath = String(folderItemXML.@classpath);													if (_packageInput.toLowerCase() != "optional" && _packageInput != "")						{							createDocClass(folderURI, classPath);						}												var version:String = executeJSFL('"getFlashVersion"');						version = String(version.split(" ")[1]).split(",")[0];												if (int(version) > 9)						{							var fla = executeJSFL('"createFlashGetProfile", "' + folderURI + '", "' + fileName + '", ' + 3 + ', ' + widthInput_txt.text + ', ' + heightInput_txt.text + ', ' + framerateInput_txt.text + ', "' + docClass + '", "' + exportPath + '", "' + classPath + '"') + "\n";							processFlaSettings(String(fla), exportPath, fileName, folderURI, classPath);						}						else						{							info_txt.htmlText += executeJSFL('"createFLA", "' + folderURI + '", "' + fileName + '", ' + 3 + ', ' + widthInput_txt.text + ', ' + heightInput_txt.text + ', ' + framerateInput_txt.text + ', "' + docClass + '", "' + exportPath + '", "' + classPath + '"') + "\n";						}						//var fla = executeJSFL('"createFlashGetProfile", "' + folderURI + '", "' + fileName + '", ' + 3 + ', ' + widthInput_txt.text + ', ' + heightInput_txt.text + ', ' + framerateInput_txt.text + ', "' + docClass + '", "' + exportPath + '"') + "\n";						//processFlaSettings(String(fla), exportPath, fileName, folderURI);					}					else					{						info_txt.htmlText += "Loading " + fileNameExtension + " (template)... Please wait...\n";						new FileCreate(this, fileNameExtension, folderURI, String(folderItemXML.@url));					}				}			}		}				function processFlaSettings(flaSettings:String, exportPath:String, fileName:String, folderURI:String, classPath:String)		{			var xml:XML = new XML(flaSettings);			xml.PublishFormatProperties.html = "0";			xml.PublishFormatProperties.defaultNames = "0";			xml.PublishFormatProperties.flashDefaultName = "0";			xml.PublishFormatProperties.flashFileName = exportPath + fileName + ".swf";						var types:Object = new Object();			types.generatorFileName = "swt";			types.projectorWinFileName = "exe";			types.projectorMacFileName = "hqx";			types.htmlFileName = "html";			types.gifFileName = "gif";			types.jpegFileName = "jpg";			types.pngFileName = "png";			types.qtFileName = "mov";			types.rnwkFileName = "smil";					// setting the other publish formats to fileName only			for (var n in types)				xml.PublishFormatProperties[n] = fileName + '.' + types[n];						xml.PublishFlashProperties.ActionScriptVersion = '3';			xml.PublishFlashProperties.PackageExportFrame = '1';						var classPath:String;				if (fileName.indexOf("/") > -1)			{				classPath = "";				var splitPath = fileName.split("/");				splitPath.length--;				var i = splitPath.length;				while (i--)				{					classPath += "../";				}			}						xml.PublishFlashProperties.AS3PackagePaths = classPath + ";.";			info_txt.htmlText += executeJSFL('"writeProfileXML", "' + escape(xml.toString()) + '", "' + folderURI + '", "' + fileName + '"') + "\n";		}		function createDocClass(folderURI:String, classPath:String = './'):void		{			if (classPath != './' && classPath.indexOf('../') > -1)			{				var folders:Array = folderURI.split("/");				while (classPath.indexOf('../') > -1)				{					folders = folders.slice(0, folders.length - 2);					classPath = classPath.slice(3);				}				folderURI = folders.join('/') + '/' + classPath;			}						var _packageClassURI = folderURI + "/" + _packageArr[0];						for (var i:int = 0; i < _packageArr.length; i++)			{				info_txt.htmlText += executeJSFL('"createFolder", "' + _packageClassURI + '", "' + _packageArr[i] + '"') + "\n";								if (i < _packageArr.length - 1)					_packageClassURI = _packageClassURI + "/" + _packageArr[i + 1];			}						info_txt.htmlText += "Loading Class.as (template)... Please wait...\n";			var cf:String = executeJSFL('"getConfigURI"') + "StructureCreator/" + DEFAULT_CLASS_URL;			new FileCreate(this, _packageClassName + '.as', _packageClassURI, cf);		}				public function updatePercent():void		{			//_createdFiles = 0;			_createdFiles += 1;			//info_txt.htmlText += "Loaded : " + Math.floor((_createdFiles / _totalFiles) * 100);			percent_txt.text = Math.floor((_createdFiles / _totalFiles) * 100) + '%';			if (_createdFiles >= _totalFiles)			{				percent_txt.text = 'Done';			}		}				/**		 * Checks For Updates		 */		private function checkForUpdate():void		{			var loader:URLLoader = new URLLoader();			loader.addEventListener(Event.COMPLETE, updateCheckComplete, false, 0, true);			loader.addEventListener(IOErrorEvent.IO_ERROR, updateCheckError, false, 0, true);			loader.load(new URLRequest(VERSION_CHECK));		}				private function updateCheckError(e:IOErrorEvent):void 		{					}				private function updateCheckComplete(e:Event):void 		{			if (e.currentTarget.data != CURRENT_VERSION)			{				var update:String = executeJSFL('"versionChanged"');				if (update == '1')				{					navigateToURL(new URLRequest("http://code.google.com/p/flashstructurecreator/"));				}			}		}			}	}