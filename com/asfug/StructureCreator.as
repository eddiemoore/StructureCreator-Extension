package com.asfug{	import flash.system.Capabilities;	import com.asfug.FileCreate;	import flash.display.*;	import flash.events.*;	import flash.net.*;	import adobe.utils.*;	/**	 * ...	 * @author Danny Murong, Ed Moore, Shang Liang	 */	public class StructureCreator extends MovieClip	{		private static const DEFAULT_SCHEMA_URL:String = "http://flashstructurecreator.googlecode.com/svn/trunk/Structure%20Schema.xml";		private static const DEFAULT_WIDTH:int = 970;		private static const DEFAULT_HEIGHT:int = 570;		private static const DEFAULT_FPS:int = 30;		private static const DEFAULT_CLASS_URL:String = "http://flashstructurecreator.googlecode.com/svn/trunk/templates/Class.as";				private var _mainFolderURL:String;		private var _schemaURL:String;		private var _schemaXML:XML;		private var _xmlLoader:URLLoader;		private var _classLoader:URLLoader;		private var _packageInput:String;		private var _packageArr:Array;		private var _packageClassName:String;		internal static var packageClassPath:String;		internal static var swfFileName:String;				private var savedSettings:SharedObject;				public function StructureCreator()		{			assignListeners();			//populatePackageInput();						savedSettings = SharedObject.getLocal("structure_creator");			if(savedSettings.data.lastSchemaValue)				schema_txt.text = savedSettings.data.lastSchemaValue;			widthInput_txt.maxChars = 5;			widthInput_txt.restrict = "0-9";			if (savedSettings.data.newwidth)				widthInput_txt.text = savedSettings.data.newwidth;			else				widthInput_txt.text = String(DEFAULT_WIDTH);							heightInput_txt.maxChars = 5;			heightInput_txt.restrict = "0-9";			if (savedSettings.data.newheight)				heightInput_txt.text = savedSettings.data.newheight;			else				heightInput_txt.text = String(DEFAULT_HEIGHT);						framerateInput_txt.maxChars = 3;			framerateInput_txt.restrict = "0-9";			if (savedSettings.data.newfps)				framerateInput_txt.text = savedSettings.data.newfps;			else				framerateInput_txt.text = String(DEFAULT_FPS);						packageInput_txt.restrict = "a-zA-Z0-9.";			packageInput_txt.text = "Optional";						default_cb.label = "Use Default";			schema_btn.label = "Select Schema";			if (Boolean(savedSettings.data.defaultCb))				default_cb.dispatchEvent(new MouseEvent(MouseEvent.CLICK));			else if (Boolean(savedSettings.data.defaultCb) == false)				trace("default not selected");			else				default_cb.dispatchEvent(new MouseEvent(MouseEvent.CLICK));		}				function assignListeners():void		{			folder_btn.addEventListener(MouseEvent.CLICK, clickHandler);			schema_btn.addEventListener(MouseEvent.CLICK, clickHandler);			create_btn.addEventListener(MouseEvent.CLICK, clickHandler);			default_cb.addEventListener(MouseEvent.CLICK, clickHandler);			widthInput_txt.addEventListener(FocusEvent.FOCUS_IN, focusInHandler);			widthInput_txt.addEventListener(FocusEvent.FOCUS_OUT, focusOutHandler);			heightInput_txt.addEventListener(FocusEvent.FOCUS_IN, focusInHandler);			heightInput_txt.addEventListener(FocusEvent.FOCUS_OUT, focusOutHandler);			framerateInput_txt.addEventListener(FocusEvent.FOCUS_IN, focusInHandler);			framerateInput_txt.addEventListener(FocusEvent.FOCUS_OUT, focusOutHandler);			packageInput_txt.addEventListener(FocusEvent.FOCUS_IN, focusInHandler);			packageInput_txt.addEventListener(FocusEvent.FOCUS_OUT, focusOutHandler);		}		function populatePackageInput():void		{			_packageInput = new String(packageInput_txt.text);			_packageArr = _packageInput.split(".");			_packageClassName = String(_packageArr.pop());			packageClassPath = String(_packageArr.join("."));		}		function clickHandler(evt:MouseEvent):void		{			var targetName:String = evt.currentTarget.name;						switch (targetName)			{				case "folder_btn":					var op:String = executeJSFL('"getMainFolderURI"');					if (op != "null")					{						_mainFolderURL = op;						folder_txt.text = _mainFolderURL;					}				break;								case "schema_btn":					var sch:String = executeJSFL('"getSchemaURL"');					if (sch != "null")					{						_schemaURL = sch;						schema_txt.text = _schemaURL;					}				break;								case "default_cb":					if (evt.currentTarget.selected)					{						schema_btn.enabled = false;						_schemaURL = StructureCreator.DEFAULT_SCHEMA_URL;						schema_txt.text = _schemaURL;					}					else					{						schema_btn.enabled = true;						//edit_btn.gotoAndStop(1);						trace("open");						schema_txt.text = "";					}				break;				case "create_btn":					populatePackageInput();										if (validate())						startCreation();				break;			}		}		function focusInHandler(evt:FocusEvent):void		{			var targetName:String = evt.currentTarget.name;						switch (targetName)			{				case "widthInput_txt":					if (widthInput_txt.text == String(StructureCreator.DEFAULT_WIDTH))						widthInput_txt.text = "";				break;								case "heightInput_txt":					if (heightInput_txt.text == String(StructureCreator.DEFAULT_HEIGHT))						heightInput_txt.text = "";				break;								case "framerateInput_txt":					if (framerateInput_txt.text == String(StructureCreator.DEFAULT_FPS))						framerateInput_txt.text = "";				break;								case "packageInput_txt":					if (packageInput_txt.text == "Optional")						packageInput_txt.text = "";				break;			}		}				function focusOutHandler(evt:FocusEvent):void		{			var targetName:String = evt.currentTarget.name;						switch (targetName)			{				case "widthInput_txt":					if (widthInput_txt.text == "")						widthInput_txt.text = String(StructureCreator.DEFAULT_WIDTH);				break;								case "heightInput_txt":					if (heightInput_txt.text == "")						heightInput_txt.text = String(StructureCreator.DEFAULT_HEIGHT);				break;								case "framerateInput_txt":					if (framerateInput_txt.text == "")						framerateInput_txt.text = String(StructureCreator.DEFAULT_FPS);				break;								case "packageInput_txt":					if (packageInput_txt.text == "")						packageInput_txt.text = "Optional";				break;			}		}		function executeJSFL(commands:String):String		{			return MMExecute('fl.runScript(fl.configURI + "WindowSWF/Structure Creator.jsfl", ' + commands + ')');		}		function validate():Boolean		{			var bool:Boolean = true;			if (folder_txt.length != 0 && schema_txt.length != 0 && widthInput_txt.length != 0 && heightInput_txt.length != 0 && framerateInput_txt.length != 0)			{				info_txt.htmlText = "";			}			else			{				info_txt.htmlText = "<font color='#FF0000'>* Fill in all fields.</font>";				bool = false;			}						return bool;		}		function startCreation():void		{			savedSettings.clear();			savedSettings.data.lastSchemaValue = schema_txt.text;			savedSettings.data.newwidth = widthInput_txt.text;			savedSettings.data.newheight = heightInput_txt.text;			savedSettings.data.newfps = framerateInput_txt.text;			savedSettings.data.defaultCb = default_cb.selected;			var flushResult:Object = savedSettings.flush();						info_txt.htmlText += "Loading schema... Please wait...\n";			_xmlLoader = new URLLoader(new URLRequest(_schemaURL));			_xmlLoader.addEventListener(IOErrorEvent.IO_ERROR, schemaXMLLoadError);			_xmlLoader.addEventListener(Event.COMPLETE, schemaXMLLoadComplete);		}				private function schemaXMLLoadError(e:IOErrorEvent):void		{			info_txt.htmlText += "<font color='#FF0000'>Error loading schema. Check internet connection.</font>\n";		}		private function schemaXMLLoadComplete(evt:Event):void		{			info_txt.htmlText += "Loading schema completed!\n";			_schemaXML = new XML(_xmlLoader.data);			getFolder(_schemaXML, _mainFolderURL);		}		private function getFolder(xml:XML, folderPath:String):void		{			var folderName:String = String(xml.@name);			var folderURI:String;			if (String(Capabilities.os.toLowerCase()).indexOf("mac") == -1)				folderURI = folderPath + "/";			else 				folderURI = folderPath;			if (folderName != "%BASE%")			{				if (String(Capabilities.os.toLowerCase()).indexOf("mac") > -1)					folderURI = folderPath + "/";				folderURI += folderName;				info_txt.htmlText += executeJSFL('"createFolder", "' + folderURI + '", "' + folderName + '"') + "\n";			}			var folderList:XMLList = xml.children();			for (var i:uint = 0; i < folderList.length(); i++)			{				var folderItemXML:XML = folderList[i];				if (folderItemXML.name() == "folder")				{					if (_packageInput.toLowerCase() != "optional" && _packageInput != "")					{						for (var j in folderList)						{							var na:String = String(folderList[j].@name);							if (folderList[j].name() == "file")							{								var ext:String = na.split(".")[1];								if (ext.toLowerCase() == "fla")								{									createDocClass(folderURI);									break;								}							}						}											}										getFolder(folderItemXML, folderURI);				}				else if (folderItemXML.name() == "file")				{					var fileNameExtension:String = String(folderItemXML.@name);					var fileName:String = fileNameExtension.split(".")[0];					var fileExtension:String = fileNameExtension.split(".")[1];										if (fileExtension.toLowerCase() == "fla")					{						swfFileName = fileName;						var docClass:String = (_packageInput.toLowerCase() == "optional") ? "" : _packageInput;						var exportPath:String = String(folderItemXML.@exportpath);						info_txt.htmlText += executeJSFL('"createFLA", "' + folderURI + '", "' + fileName + '", ' + 3 + ', ' + widthInput_txt.text + ', ' + heightInput_txt.text + ', ' + framerateInput_txt.text + ', "' + docClass + '", "' + exportPath + '"') + "\n";						//var fla = executeJSFL('"createFlashGetProfile", "' + folderURI + '", "' + fileName + '", ' + 3 + ', ' + widthInput_txt.text + ', ' + heightInput_txt.text + ', ' + framerateInput_txt.text + ', "' + docClass + '", "' + exportPath + '"') + "\n";						//processFlaSettings(String(fla), exportPath, fileName, folderURI);					}					else					{						info_txt.htmlText += "Loading " + fileNameExtension + " (template)... Please wait...\n";						new FileCreate(this, fileNameExtension, folderURI, String(folderItemXML.@url));					}				}			}		}				/*function processFlaSettings(flaSettings:String, exportPath:String, fileName:String, folderURI:String)		{			var xml:XML = new XML(flaSettings);			xml.PublishFormatProperties.html = "0";			xml.PublishFormatProperties.defaultNames = "0";			xml.PublishFormatProperties.flashDefaultName = "0";			xml.PublishFormatProperties.flashFileName = exportPath + fileName + ".swf";						var types:Object = new Object();			types.generatorFileName = "swt";			types.projectorWinFileName = "exe";			types.projectorMacFileName = "hqx";			types.htmlFileName = "html";			types.gifFileName = "gif";			types.jpegFileName = "jpg";			types.pngFileName = "png";			types.qtFileName = "mov";			types.rnwkFileName = "smil";					// setting the other publish formats to fileName only			for (var n in types)				xml.PublishFormatProperties[n] = fileName + '.' + types[n];						xml.PublishFlashProperties.ActionScriptVersion = '3';			xml.PublishFlashProperties.PackageExportFrame = '1';						var classPath:String = "./";				if (fileName.indexOf("/") > -1)			{				classPath = "";				var splitPath = fileName.split("/");				splitPath.length--;				var i = splitPath.length;				while (i--)				{					classPath += "../";				}			}						xml.PublishFlashProperties.AS3PackagePaths = classPath + "classes" + ";.";			info_txt.htmlText += executeJSFL('"writeProfileXML", "' + escape(xml.toString()) + '", "' + folderURI + '", "' + fileName + '"') + "\n";		}*/		function createDocClass(folderURI:String):void		{			var _packageClassURI = folderURI + "/" + _packageArr[0];						for (var i:int = 0; i < _packageArr.length; i++)			{				info_txt.htmlText += executeJSFL('"createFolder", "' + _packageClassURI + '", "' + _packageArr[i] + '"') + "\n";								if (i < _packageArr.length - 1)					_packageClassURI = _packageClassURI + "/" + _packageArr[i + 1];			}						info_txt.htmlText += "Loading Class.as (template)... Please wait...\n";			new FileCreate(this, _packageClassName + '.as', _packageClassURI, StructureCreator.DEFAULT_CLASS_URL);		}			}	}