package com.asfug {	import com.adobe.images.JPGEncoder;	import com.adobe.images.PNGEncoder;	import flash.display.BitmapData;	import flash.display.Loader;	import flash.display.LoaderInfo;	import flash.display.MovieClip;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.filesystem.File;	import flash.filesystem.FileMode;	import flash.filesystem.FileStream;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.net.URLStream;	import flash.text.TextField;	import fl.controls.TextArea;	import flash.utils.ByteArray;	//import flash.utils.Endian;	/**	 * ...	 * @author Ed Moore	 */	public class FileCreate	{		private var _dir:String;		private var _url:String;		private var _name:String;		private var _file_content:String;		private var _byte_content:ByteArray;		private var _nonTextExtArray:Array =	['png', 'jpg', 'jpeg', 'gif', 'tif', 'tiff', 'bmp', 'dds', 'pdn', 'pict', 'pct', 'psd', 'pdd', 'psp', 'pxr', 'raw', //IMAGE FILES												 'tga', 'targa', 'icb', 'vda', 'vst', 'pix', 'xbm', 'xcf', 'xpm',												 'ai', 'eps', 'wmf', 'emf', 'art', 'xar',  //VECTOR FILES												 '3dmf', 'max', '3ds', 'ac', 'an8', 'aoi', 'b3d', 'blend', 'c4d', 'lwo', 'lws', 'lxo', 'ma', 'mb', 'md2', 'md3',												 'mdx', 'm', 'mesh', 'mm3d', 'nif', 'obj', 'off', 'skp', 'smd', 'u3d', 'wings', 'x', 'x3d', 'z3d',												'mp3', 'wav', 'ogg', 'wma', 'aif', 'aiff', /*'mid',*/ //AUDIO FILES												'avi', 'mov', 'flv', 'm4v', 'mkv', 'mpeg', 'mpg', 'mpe', 'mp4', 'rm', 'svi', 'smi', 'swf', 'wmv', //VIDEO FILES												'xls', 'doc', 'docx', 'key', 'odp', 'otp', 'pps', 'ppt', 'pptx', 'sdd', 'sti', 'sxi', 'pdf', //OFFICE FILES												'mpp', //Project Managenent												'fla', //ADOBE FILES												/*'ttf',*/ 'otf', //FONTS												'jar', 'exe', //EXECUTIBLE FILES												'map' ,'tag', 'sav', 'lev', //HALO Engine												'deh', 'dsg', 'lmp', 'mus', 'wad', //DOOM Engine												'bsp', 'map', 'mdl', 'md2', 'md3', 'md5', 'glm', 'pak', 'pk2', 'pk3', 'pk4', 'dat', 'roq', //QUAKE ENGINE												'u', 'uax', 'umx', 'unr', 'upk', 'usx', 'ut2', 'ut3', 'utx', 'uxx', //Unreal Engine												'b', 'bol', 'dbpf', 'gcf', 'img', 'map', 'pod', 'rep', 'dat', 'cs4lot', 'sc4model', 'smzip', //Other Game formats												'vfd', 'vhd', 'vud', 'vmc', 'vsv', //Microsoft virtual PC/Virtual Server												'vmdk', 'dsk', 'vdi', 'hdd', 'pvs', 'sav', //Virual Machines												'drv', 'deu', 'db', 'dat', 'cur', 'dll', 'cpl', 'chm', 'cod', 'cnv', 'bin',  //DRIVER FILES												'class', 'chq',												'zip', 'rar', '7z', 'ace', 'bz2', 'gz', 'tar', //COMPRESSES FILES												'iso', 'nrg', 'img', 'dsk', 'mds', 'dmg', 'd64' //Recorable media archive												]; 		private var _loader:URLStream;		private var _urlLoader:URLLoader;		private var _file_ext:String;		private var _quality:uint;				public function FileCreate(dir:String, name:String = '', url:String = '', file_content:String = '', quality:uint = 80) 		{			_dir = dir;			_url = url;			_name = name;			_file_content = file_content;			_quality = quality;						_file_ext = _name.split('.')[1] as String;						StructureCreator.instance.addInfoText("File name: " + _name + " : " + _file_ext);						if (_url == '')			{				createTextFile();			}			else if (_nonTextExtArray.indexOf(_file_ext) > -1)			{				loadByteFile();			} 			else			{				loadTextFileContent();			}						}				private function loadByteFile():void		{			_loader = new URLStream();			_byte_content = new ByteArray();			//_byte_content.endian = Endian.BIG_ENDIAN;			_loader.addEventListener(Event.COMPLETE, byteFileLoaded);			_loader.addEventListener(IOErrorEvent.IO_ERROR, byteFileIOError);			_loader.load(new URLRequest(_url));		}				private function byteFileIOError(e:IOErrorEvent):void 		{			StructureCreator.instance.addInfoText("CANNOT LOAD " + _name);		}				private function byteFileLoaded(e:Event):void 		{			_loader.removeEventListener(Event.COMPLETE, byteFileLoaded);			StructureCreator.instance.addInfoText("File contents LOADED for " + _name);						if (_nonTextExtArray.indexOf(_file_ext.toLowerCase()) > -1)			{				_loader.readBytes(_byte_content, 0, _loader.bytesAvailable);				createByteFile();			}		}				private function createByteFile():void		{			var file:File = new File();			file.url = _dir;			file = file.resolvePath(_name);						var fs:FileStream = new FileStream();			fs.open(file, FileMode.WRITE);			fs.writeBytes(_byte_content);			fs.close();		}						/**		 * Text Based File		 */		private function loadTextFileContent():void		{			StructureCreator.instance.addInfoText("Load file contents for " + _name);			_urlLoader = new URLLoader();			_urlLoader.addEventListener(Event.COMPLETE, textFileLoaded);			_urlLoader.load(new URLRequest(_url));		}				private function textFileLoaded(e:Event):void		{			_urlLoader.removeEventListener(Event.COMPLETE, textFileLoaded);			StructureCreator.instance.addInfoText("File contents LOADED for " + _name);			_file_content = e.currentTarget.data as String;			createTextFile();		}				private function createTextFile():void		{			_file_content = addVariables();									var file:File = new File();			file.url = _dir;			file = file.resolvePath(_name);						var fs:FileStream = new FileStream();			fs.open(file, FileMode.WRITE);			fs.writeUTFBytes(_file_content);			fs.close();		}				private function addVariables():String		{			_file_content = _file_content.replace(/%PROJECT_TITLE%/g, StructureCreator.project_title);			return _file_content		}			}}